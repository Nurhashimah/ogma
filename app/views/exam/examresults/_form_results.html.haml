- model_class = Exam
.col-md-11
  %hr  
  %table.table.table-bordered
    %head
      %tr
        %th{rowspan: 2} &nbsp;
        %th{rowspan: 2}=t('student.name')
        %th{rowspan: 2}=t('student.students.matrixno')
        %th{rowspan: 2}=t('student.icno')
        - kebidanan = Programme.roots.where('name ILIKE(?)', '%Kebidanan%').first.id
        - kejururawatan = Programme.roots.where('name ILIKE(?)', '%Kejururawatan%').first.id
        /- @subjects = Examresult.get_subjects(@examresult.programme_id,@examresult.semester)
        - @subjects = @examresult.retrieve_subject
        - @subject_credits=[]
        - for subject in @subjects
          - @subject_credits << subject.credits
          %th.centre{colspan: 2}=h subject.code
        %th.centre{rowspan: 2}= t 'examresult.total' 
        %th.centre{rowspan: 2} PNGS17
        %th.centre{rowspan: 2} PNGK
        %th.centre{rowspan: 2} Status
        %th.centre{rowspan: 2}= t 'examresult.remark'
      %tr
        - 0.upto(@subjects.count-1) do |count|
          %th=t('exam.grade.grading_id')
          %th NG
    %body
      /- @nos=0
      /= f.fields_for :resultlines do |builder|
      /  - @nos+=1
      /  = render 'resultline_fields', {:f => builder, :nos => @nos}
      /- if @students.count > 0 && @examresult.resultlines.count==0 && @examresult.errors.count==0
      
      /BELOW - will display fields successfully
      - if @students.count > 0 
        - 0.upto(@students.count-1).each do |no|
          %tr
            %td=no+1
            /maintan entered values, although errors arise
            - if @examresult.resultlines
              /.count > 0
              - @value_status = @examresult.resultlines[no].status if @examresult.resultlines[no]
              - @value_remark = @examresult.resultlines[no].remark if @examresult.resultlines[no]
              - @value_id = @examresult.resultlines[no].id if @examresult.resultlines[no]
              - @value_pngk = @examresult.resultlines[no].pngk if @examresult.resultlines[no]
            
            = hidden_field "examresult[resultlines_attributes][#{no}]", :id, :size =>8, :value=>@value_id
            = hidden_field "examresult[resultlines_attributes][#{no}]", :student_id, :size =>8, :value=>@students[no].id
            %td=@students[no].name
            %td=@students[no].matrixno
            %td=@students[no].icno
            
            - unless @subjects.nil? || @subjects.blank? 
              - @finaletotal=111
              - @pngs17=222
              - @finale_all=[]
              - for subject in @subjects
                - @grade_student=Grade.where(subject_id: subject.id).where(student_id: @students[no].id)
                - if @grade_student.count > 0
                  - @gradeit=Grade.where('student_id=? and subject_id=?', @students[no].id,subject.id).first.set_gred 
                  - @finale=Grade.where('student_id=? and subject_id=?', @students[no].id,subject.id).first.set_NG.to_f 
                  - @finale_all << @finale
                  %td= @gradeit 
                  %td= @finale 
                  /https://trello.com/c/zlIT9mSO - Kebidanan (STATUS) : gagal if any of subject is failed - Kejururawatan too
                  - @value_status='4' if [kebidanan, kejururawatan].include?(@examresult.programme_id) && @gradeit=="C-"  
                - else
                  - @finale_all << 0.00
                  %td &nbsp;
                  %td 0.00
                  /https://trello.com/c/zlIT9mSO - Kebidanan (STATUS) : gagal if any of subject has no grade - Kejururawatan too
                  - @value_status='4' if [kebidanan, kejururawatan].include?(@examresult.programme_id)
              - @finaletotal=Examresult.total(@finale_all,@subject_credits) 
              - @pngs17=number_with_precision(Examresult.pngs17(@finaletotal, @subject_credits), :precision => 2) 

            %td
              = hidden_field "examresult[resultlines_attributes][#{no}]", :total, :size =>8, :value => @finaletotal
              = @finaletotal
            %td
              = hidden_field "examresult[resultlines_attributes][#{no}]", :pngs17, :size =>8, :value => @pngs17
              = @pngs17
            %td= text_field "examresult[resultlines_attributes][#{no}]", :pngk, :size =>8, :value => @value_pngk
            - fisioterapi=Programme.where(course_type: 'Diploma').where('name ILIKE (?)', '%Fisioterapi%').first.id
            - perubatan=Programme.where(course_type: 'Diploma').where('name ILIKE (?)', 'Penolong Pegawai Perubatan').first.id
            - if [fisioterapi, perubatan].include?(@examresult.programme_id)
              - status_selection = DropDown::RESULT_STATUS_CONTRA
            - else
              - status_selection = DropDown::RESULT_STATUS
            %td
              - if [kebidanan, kejururawatan].include?(@examresult.programme_id)
                = hidden_field "examresult[resultlines_attributes][#{no}]", :status, :size =>8, :value => @value_status
                =(DropDown::RESULT_STATUS.find_all{|disp, value| value == @value_status}).map {|disp, value| disp}[0]
              - else
                = select_tag "examresult[resultlines_attributes][#{no}][status]", options_for_select([[t('select'), '0']]+status_selection, @value_status) 
            %td= text_field "examresult[resultlines_attributes][#{no}]", :remark, :size =>8, :value => @value_remark
          
      /NOTE - as of 1st Nov2015 : Value for STATUS - Kebidanan & Kejururawatan - set to 'Gagal' if any subject status is 'Gagal', otherwise set to 'Lulus'.
      /Other programmes : requires user to select STATUS accordingly UNLESS define by user.
      /Total, PNGS17 : auto-generated, non-editable & display only 4 all programmes.
      /STATUS : auto-generated, non-editable & display only for Kejururawatan & Kebidanan.