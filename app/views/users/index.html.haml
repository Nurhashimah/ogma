- model_class = User
.page-header
  %h1= t('user.list')#, :default => model_class.model_name.human.pluralize
  
.navbar.navbar-inverse{role: "navigation", style: "padding-right:40px;"}
  %ul.nav.navbar-nav.navbar-right
    %li= link_to content_tag(:li, fa_icon("search", text: (t 'actions.search'))), "#", class: "index_search_bar"
    /TODO - pdf listing of ICMS user
    %li= link_to content_tag(:li, fa_icon("print", text: (t 'actions.print'))), "#", class: "bogus"
- if is_developer?
  = current_user.college.users.map(&:college_id)  
.row
  %table.table-striped.table-hover.ogma
    %thead
      %tr
        - if is_developer?
          %th{style: "width:8%;"}=(t 'user.college') 
        %th{style: "width:20%;"}= sort_link(@search, :email, (t 'user.email'))
        %th{style: "width:15%;"}= sort_link(@search, :keyword, (t 'user.userable_id'))
        %th{style: "width:17%;"}=(t 'user.position')+" / Unit"
        %th{style: "width:10%;"}= sort_link(@search, :userable_type, (t 'user.userable_type'))
        %th{style: "width:28%;"}= (t 'user.roles')
        - if is_developer? || is_admin?
          %th{style: "width:2%;"}
    %tbody
      = render "search_bar"
      - @user_by_type.each do |user_type, users| 
        - if is_developer?
          = users.map(&:college_id)
        - for user in users
          %tr
            - if is_developer?
              %td=user.college.try(:code).try(:upcase)
            %td=user.userable ? (link_to user.email, edit_user_path(user)) : user.email
            %td=h user.userable && user.userable_type=='Staff' ? user.userable.try(:staff_with_rank) : user.userable.try(:student_with_rank)
            %td
              - if user.userable && (user.userable_type == "Staff" || user.userable_type == "Student")
                =user.userable_type == "Staff" ? (user.userable.positions_units(is_developer?)).html_safe : t('not_applicable')
                /= user.userable_type == "Staff" ? list_comma(user.userable.positions.pluck(:name)) : ""
                /= user.userable_type == "Staff" && user.userable.positions.pluck(:unit).present? ? " / "+user.userable.positions.pluck(:unit).first : ""
              - else
                - unless user.userable_type.blank?
                  %span{style: 'color: red;'}
                    = user.userable_type == "Staff" ? (t 'user.staff_removed') : (t 'user.student_removed')
                    %br=t 'user.userable_removed2'
                  
            %td.centre
              - if user.userable && (user.userable_type == "Staff" || user.userable_type == "Student")
                - a='font-weight: bold;'
              - else
                - unless user.userable_type.blank?
                  - a='color: red; text-decoration: line-through'
                - else
                  - a='color: blue;'
              %span{style: a}
                - if user.userable_type == "Staff" 
                  = (t 'staff.title') 
                - elsif user.userable_type == "Student"
                  = (t 'student.title')
                - else
                  =(t 'user.user_not_link_entity')
            %td=translated_list_comma(user.roles.pluck(:authname))
            /=list_comma(user.roles.pluck(:name))
            - if is_developer? && reg_developer(user.id)==false
              %td= link_to content_tag(:i, "", class: "fa fa-trash-o"), user_path(user), :method => 'delete',:data => { :confirm => t('.confirm', :default => t("helpers.links.confirm", :default => 'Are you sure?')) }
            - if is_admin?
              %td
                - unless user.userable && !user.userable_type.blank?
                  = link_to content_tag(:i, "", class: "fa fa-trash-o"), user_path(user), :method => 'delete',:data => { :confirm => t('.confirm', :default => t("helpers.links.confirm", :default => 'Are you sure?')) }

  .right{style:"padding:0 30px; margin:0;"}= paginate @users, :theme => 'twitter-bootstrap-3'

