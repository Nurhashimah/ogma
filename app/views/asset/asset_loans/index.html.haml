- model_class = AssetLoan
.page-header
  %h1= t('asset.loan.asset_on_loan')#, :default => model_class.model_name.human.pluralize
  
.navbar.navbar-inverse{role: "navigation", style: "padding-right:40px;"}
  %ul.nav.navbar-nav.navbar-right
    %li= link_to content_tag(:li, fa_icon("search", text: (t 'actions.search'))), "#", class: "index_search_bar"
    %li=link_to (fa_icon("file-pdf-o", text: (t 'actions.print'))), loan_list_asset_loans_path(params.merge(format: 'pdf'))

.row
  %table.table-striped.table-hover.ogma
    %thead
      %tr
        %th{width: '20%'}= sort_link(@search, :asset_id, ((t 'asset.loan.vehicle')+" / "+(t 'asset.loan.other_asset')))
        %th{width: '20%'}
          = sort_link(@search, :staff_id, (t 'asset.loan.staff_id'))
          = (t 'asset.loan.separator_slash')+(t 'asset.loan.reasons')
        %th{width: '20%'}
          = sort_link(@search, :loaned_by, (t 'asset.loan.loaned_by'))
          =  (t 'asset.loan.separator_slash')+(t 'asset.loan.responsible_unit')
        %th{width: '15%'}
          = sort_link(@search, :loaned_on, (t 'asset.loan.requested_for'))
          = t 'asset.loan.separator_slash'
          = sort_link(@search, :expected_on, (t 'asset.loan.returned_date'))
        %th{width: '10%'}= sort_link(@search, :approved_date, (t 'asset.loan.approved_date'))
        %th{width: '15%'}Status
    %tbody
      = render "search_bar"
      /to revised later - upon completion of roles assignment - Admin, Asset Admin & Owner+Responsible Unit (index list)
      - @asset_loans.each do |asset_loan|
        %tr
          %td
            - if Asset.vehicle.pluck(:id).include?(asset_loan.asset_id)
              = link_to (fa_icon("car")+" "+asset_loan.asset.code_asset), asset_loan_path(asset_loan)
            - else
              = link_to asset_loan.asset.code_asset, asset_loan_path(asset_loan) 
          %td
            =asset_loan.staff.staff_with_rank
            %br= asset_loan.reasons.capitalize
          %td
            =h asset_loan.asset.assignedto.staff_with_rank unless asset_loan.asset.assignedto.blank?
            %br
              %b=h asset_loan.asset.assignedto.positions.first.unit unless asset_loan.asset.assignedto.positions.blank?
          %td  
            =h asset_loan.loaned_on.try(:strftime, '%d %b %Y')
            %br=h asset_loan.expected_on.try(:strftime, '%d %b %Y')
          %td
            - if asset_loan.is_approved == true
              = h asset_loan.approved_date.try(:strftime, '%d %b %Y')
            - elsif asset_loan.is_approved == false
              %span{:style => "font-weight:bold;color:red;"}=t 'asset.loan.rejected'
            - else
              %span{:style => "font-weight:bold;color:green;"}=t 'asset.loan.pending'
          %td
            - if asset_loan.is_approved == true && asset_loan.is_returned != true 
              = t 'asset.loan.onloan'
              - if asset_loan.expected_on == Date.today
                %br
                  %span{:style =>"font-weight:bold; color:red;"}=t 'asset.loan.due_date'
              - elsif asset_loan.expected_on < Date.today
                %br
                  %span{:style=>"font-weight:bold; color:red;"}=t 'asset.loan.overdue'
            - elsif asset_loan.is_approved == true && asset_loan.is_returned == true
              = t 'asset.loan.is_returned'   
          
  .right{style:"padding:0 30px; margin:0;"}= paginate @asset_loans, :theme => 'twitter-bootstrap-3'

